apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

Properties properties = new Properties()
properties.load(project.rootProject.file('project.properties').newDataInputStream())

//bintray user info
def BINTRAY_USER = properties.getProperty("BINTRAY_USER")
def BINTRAY_APIKEY = properties.getProperty("BINTRAY_APIKEY")
def BINTRAY_REPO = properties.getProperty("BINTRAY_REPO")

//proj info
def PROJ_GROUP = properties.getProperty("PROJ_GROUP")
def PROJ_NAME = properties.getProperty("PROJ_NAME")
def PROJ_ARTIFACTID = properties.getProperty("PROJ_ARTIFACTID")
def PROJ_VERSION = properties.getProperty("PROJ_VERSION")
def PROJ_WEBSITEURL = properties.getProperty("PROJ_WEBSITEURL")
def PROJ_VCSURL = properties.getProperty("PROJ_VCSURL")
def PROJ_PACKAGING = properties.getProperty("PROJ_PACKAGING")
def PROJ_DESCRIPTION = properties.getProperty("PROJ_DESCRIPTION")

//dev info
def DEVELOPER_ID = properties.getProperty("DEVELOPER_ID")
def DEVELOPER_NAME = properties.getProperty("DEVELOPER_NAME")
def DEVELOPER_EMAIL = properties.getProperty("DEVELOPER_EMAIL")

def LICENSENAME = properties.getProperty("LICENSENAME")
def LICENSEURL = properties.getProperty("LICENSEURL")
def ALLLICENSES = properties.getProperty("ALLLICENSES")

version = PROJ_VERSION
group = PROJ_GROUP

install {
    repositories.mavenInstaller {

        pom {
            project {
                packaging PROJ_PACKAGING
                groupId PROJ_GROUP
                artifactId PROJ_ARTIFACTID

                name PROJ_NAME
                description PROJ_DESCRIPTION
                url PROJ_WEBSITEURL

                licenses {
                    license {
                        name LICENSENAME
                        url LICENSEURL
                    }
                }

                developers {
                    developer {
                        id DEVELOPER_ID
                        name DEVELOPER_NAME
                        email DEVELOPER_EMAIL
                    }
                }

                scm {
                    connection PROJ_VCSURL
                    developerConnection PROJ_VCSURL
                    url PROJ_WEBSITEURL
                }
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {

    user = BINTRAY_USER
    key = BINTRAY_APIKEY

    configurations = ['archives']

    pkg {

        repo = BINTRAY_REPO
        name = PROJ_NAME
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        vcsUrl = PROJ_VCSURL
        licenses = ALLLICENSES
        publish = true
        publicDownloadNumbers = true

        version {
            desc = PROJ_DESCRIPTION
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("BINTRAY_GPG_PASSWORD")
                //Optional. The passphrase for GPG signing'
            }
        }

    }
}